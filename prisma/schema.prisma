generator client {
provider = "prisma-client-js"
}


datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}


model User {
id String @id @default(cuid())
email String @unique
name String?
image String?
role Role @default(STUDENT)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
accounts Account[]
sessions Session[]
progress Progress[]
}


enum Role {
STUDENT
INSTRUCTOR
ADMIN
}


model Word {
id String @id @default(cuid())
english String
thai String
roman String
week Int
chunkId String
createdAt DateTime @default(now())
progress Progress[]
}


model Progress {
id String @id @default(cuid())
userId String
wordId String
xp Int @default(0)
mastery Int @default(0)
unlocked Boolean @default(false)
source UnlockSource @default(QUIZ)
updatedAt DateTime @updatedAt


user User @relation(fields: [userId], references: [id])
word Word @relation(fields: [wordId], references: [id])


@@unique([userId, wordId], name: "userId_wordId")
}


enum UnlockSource {
QUIZ
GAME
}


model Account {
id String @id @default(cuid())
userId String
type String
provider String
providerAccountId String
refresh_token String?
access_token String?
expires_at Int?
token_type String?
scope String?
id_token String?
session_state String?
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
@@unique([provider, providerAccountId])
}


model Session {
id String @id @default(cuid())
sessionToken String @unique
userId String
expires DateTime
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
identifier String
token String @unique
expires DateTime
@@unique([identifier, token])
}
